// grammar.lark

#################
#  ENTRY POINT  #
?start: translation_unit


##########################################################################################################
# TOP-LEVEL STRUCTURES

translation_unit:           // entire source file
declaration:                // top-level decleration (var, fun, class)
function_definition         // a complete fuction
external_definition         // either a declaration or function def

##########################################################################################################
# DECLARATIONS & TYPES

declaration_specifiers      // types & storage qualifiers (int, static)
type_specifiers             // (int, float, char... etc])
init_declarator             // (x, x = 5, arr[10], *ptr)
parameter_declaration       // parameter in fuction declaration
declarator                  // variable or fuction declaration
initializer                 // the "= value" or "{...}" part

##########################################################################################################
# EXPRESSIONS

primary_expression          // identifiers, literals, grouped expression
postfix_expression          // calls, array access, x++, x.y
unary_expression            // -x, *p, &x, !x
multiplicative_expression   // x * y, x / y
additive_expression         // x + y, x - y
relational_expression       // x < y, x >= y
equality_expression         // x == y, x != y
logical_and_expression      // x && y
logical_or_expression       // 'x
assignment_expression       // x = y + 1, x += 1
expression                  // one or more comma-seperatied expressions
conditional_expression      // ternary: cond ? x : y

##########################################################################################################
# STATEMENTS

statement                   // generic statement
compound_statement          //  "{ stmt; stmt; }" block
expression_statement        // expr;
declaration_statement       // int x = 0;
selection_statement         // if, if-else, switch
interation_statement        // for, while, do-while
jump_statement              // return, break, continue, goto
labeled_statement           // label: stmt;

##########################################################################################################
# TERMINALS

# IDENTIFIERS & LITERALS
#############################
IDENTIFIER:     /[a-zA-Z0-9_]*/
INT_LITERAL:    /\d+/
STRING_LITERAL: /"[a-zA-Z0-9_]*"/
BOOL_LITERAL:   "TRUE"
            |   "FALSE"
NULLPTR:        "NULL"

# KEYWORDS (CONTROL-FLOW)
##############################
IF:         "if"
ELSE:       "else"
SWITCH:     "switch"
CASE:       "case"
DEFAULT:    "default"
FOR:        "for"
WHILE:      "while"
DO:         "do"
BREAK:      "break"
CONTINUE:   "continue"
RETURN:     "return"
GOTO:       "goto"

# KEYWORDS (TYPES)
######################
INT:        "int"
FLOAT:      "float"
DOUBLE:     "double"
CHAR:       "char"
VOID:       "void"
BOOL:       "bool"
AUTO:       "auto"
SIGNED:     "signed"
UNSIGNED:   "unsigned"
SHORT:      "short"
LONG:       "long"
CONST:      "const"
VOLATILE:   "volatile"
STATIC:     "static"
EXTERN:     "extern"
MUTABLE:    "mutable"
REGISTER:   "register"
INLINE:     "inline"
VIRTUAL:    "virtual"
EXPLICIT:   "explicit"

# KEYWORDS (CLASS, STRUCT, NAMESPACE)
#########################################
CLASS:      "class"
STRUCT:     "struct"
UNION:      "untion"
ENUM:       "enum"
NAMESPACE:  "namespace"
TEMPLATE:   "template"
TYPEDEF:    "tyepdef"
USING:      "using"
FRIEND;     "freind"
PUBLIC:     "public"
PRIVATE:    "private"
PROTECTED:  "protected"

# OPERATORS
###############
PLUS:       "+"
MINUS:      "-"
STAR:       "*"
SLASH:      "/"
PERCENT:    "%"
EQUAL:      "="
PLUS_EQUAL:    "+="
MINUS_EQUAL:   "-="
STAR_EQUAL:    "*="
SLASH_EQUAL:   "/="
PERCENT_EQUAL: "%="

LT:         "<"
GT:         ">"
LE:         "<="
GE:         ">+"
EQ:         "=="
NEQ:        "!="

AND:        "&&"
OR:         "||"
NOT:        "!"
BIT_AND:    ""
BIT_OR:     ""
BIT_NOT:    ""
SHL:        ""
SHR:        ""

INCREMENT:  "++"
DECREMENT:  "--"
ARROW:      "->"
DOT:        "."
TERNARY:    "?"
COLON:      ":"

# PUCTUATION
###############
LPAREN:     "("
RPAREN:     ")"
LBRACE:     "{"
RBRACE:     "}"
LBRACKET:   "["
RBRACKET:   "]"
SEMICOLON:  ";"
COMMA:      ","
DOT:        "."
ELLIPSIS:   "~"

# MISCELLANEOUS
##################
HASH:            "#"
INCLUDE:         "include"
DEFINE:          "define"
USING_NAMESPACE: "using"

##########################################################################################################
# RULESET
%ignore /\s+/
%import common.NUMBER
%import common.WS
%ignore WS