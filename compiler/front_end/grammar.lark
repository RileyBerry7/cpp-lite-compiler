// grammar.lark

#################
#  ENTRY POINT  #
?start: translation_unit

translation_unit: external_declaration*

external_declaration: function_definition
                    | declaration

//                    | linkage_specification
//                    | namespace_definition
//                    | empty_declaration
//                    | attribute_declaration

########################################################################################################################
# DECLARATORS

function_definition:  declaration_specifier_list declarator compound_statement

declaration: declaration_specifier_list initializer_declarator_list? _SEMICOLON


initializer_declarator_list: init_declarator ( _COMMA init_declarator )* _COMMA?
init_declarator:  declarator
               |  declarator EQUAL initializer

?initializer: expression

declarator: pointer? direct_declarator

pointer: STAR pointer? | BIT_AND | BIT_AND BIT_AND

direct_declarator: IDENTIFIER
                 | _LPAREN declarator _RPAREN              // parentheses for grouping
                 | direct_declarator array_suffix
                 | direct_declarator function_suffix

declarator_suffix: array_suffix
                 | function_suffix

array_suffix:    _LBRACKET constant_expression _RBRACKET
function_suffix: _LPAREN parameter_list _RPAREN

########################################################################################################################
# DECLARATOR SPECIFIERS

parameter_list: (parameter (_COMMA parameter)*)?

parameter:  type_specifier IDENTIFIER
         |  ELLIPSIS

declaration_specifier_list: declaration_specifiers+

?declaration_specifiers: storage_class_specifier
                       | type_specifier
                       | type_qualifier
                       | function_specifier
                       | FRIEND
                       | TYPEDEF
                       | INLINE
                       | CONSTEXPR

storage_class_specifier: AUTO | EXTERN | STATIC | REGISTER | MUTABLE

type_qualifier: CONST | VOLATILE | RESTRICT


?type_specifier: simple_type_specifier
               | elaborated_type_specifier

simple_type_specifier:     VOID | CHAR | INT | FLOAT | DOUBLE | BOOL | IDENTIFIER
elaborated_type_specifier: CLASS IDENTIFIER | STRUCT IDENTIFIER | ENUM IDENTIFIER

function_specifier: INLINE | VIRTUAL | EXPLICIT

##########################################################################################################
# EXPRESSIONS


//postfix_expression          // calls, array access, x++, x.y
//unary_expression            // -x, *p, &x, !x
//logical_and_expression      // x && y
//logical_or_expression       // 'x
//expression                  // one or more comma-seperatied expressions
//conditional_expression      // ternary: cond ? x : y

constant_expression: expression

########################################################################################################################

# top-level expressions
#####################################################################
?expression: logic_or
           | IDENTIFIER assign_op expression   -> assignment


# All the boolean/arithmetic precedence levels:
###############################################

?logic_or: logic_or OR logic_and      -> or
         | logic_and

?logic_and: logic_and AND equality     -> and
          | equality

?equality: equality (EQ | NEQ) relational  -> eq
         | relational

?relational: relational (LT | GT | LE | GE) sum  -> rel_expr
           | sum

?sum: sum (PLUS | MINUS) product         -> add
    | product

?product: product (STAR | SLASH | PERCENT) atom
        | atom

?atom: IDENTIFIER
     | literal
     | _LPAREN expression _RPAREN

# Helper for all the assignment operators
###########################################
assign_op: EQUAL
         | PLUS_EQUAL
         | MINUS_EQUAL
         | STAR_EQUAL
         | SLASH_EQUAL
         | PERCENT_EQUAL

literal: INT_LITERAL
       | FLOAT_LITERAL
       | CHAR_LITERAL
       | STRING_LITERAL
       | BOOL_LITERAL
       | NULLPTR


##########################################################################################################
# STATEMENTS

compound_statement: _LBRACE statement* _RBRACE

?statement: jump_statement | selection_statement | iteration_statement | declaration

expression_statement: expression _SEMICOLON


selection_statement: if_statement

?if_statement: IF _LPAREN expression _RPAREN compound_statement
            | IF _LPAREN expression _RPAREN compound_statement ELSE compound_statement
            | IF _LPAREN expression _RPAREN compound_statement ELSE if_statement compound_statement

iteration_statement: FOR _LPAREN expression _SEMICOLON expression _SEMICOLON expression _RPAREN compound_statement

?jump_statement: return_statement | break_statement | continue_statement | goto_statement
return_statement: RETURN expression _SEMICOLON
break_statement: BREAK _SEMICOLON
continue_statement: CONTINUE _SEMICOLON
goto_statement: GOTO IDENTIFIER _SEMICOLON

labeled_statement: IDENTIFIER COLON statement _SEMICOLON

##########################################################################################################
# TERMINALS

# IDENTIFIERS & LITERALS
#############################
IDENTIFIER:     /[a-zA-Z_][a-zA-Z0-9_]*/
INT_LITERAL:    /0|[1-9][0-9]*/
FLOAT_LITERAL:  /[0-9]+\.[0-9]+([eE][+-]?[0-9]+)?/
CHAR_LITERAL:   /'([^'\\]|\\.)'/
STRING_LITERAL: /"(\\"|[^"\\])*"/
BOOL_LITERAL:   "TRUE" | "FALSE"
NULLPTR:        "nullptr"

# KEYWORDS (CONTROL-FLOW)
##############################
IF:         "if"
ELSE:       "else"
SWITCH:     "switch"
CASE:       "case"
DEFAULT:    "default"
FOR:        "for"
WHILE:      "while"
DO:         "do"
BREAK:      "break"
CONTINUE:   "continue"
RETURN:     "return"
GOTO:       "goto"

# KEYWORDS (TYPES)
######################
INT:        "int"
FLOAT:      "float"
DOUBLE:     "double"
CHAR:       "char"
VOID:       "void"
BOOL:       "bool"
AUTO:       "auto"
SIGNED:     "signed"
UNSIGNED:   "unsigned"
SHORT:      "short"
LONG:       "long"
CONST:      "const"
CONSTEXPR:  "constexpr"
VOLATILE:   "volatile"
STATIC:     "static"
EXTERN:     "extern"
MUTABLE:    "mutable"
REGISTER:   "register"
RESTRICT:   "restrict"
INLINE:     "inline"
VIRTUAL:    "virtual"
EXPLICIT:   "explicit"

# KEYWORDS (CLASS, STRUCT, NAMESPACE)
#########################################
CLASS:      "class"
STRUCT:     "struct"
UNION:      "union"
ENUM:       "enum"
NAMESPACE:  "namespace"
TEMPLATE:   "template"
TYPEDEF:    "tyepdef"
USING:      "using"
FRIEND:     "friend"
PUBLIC:     "public"
PRIVATE:    "private"
PROTECTED:  "protected"

# OPERATORS
###############
PLUS:       "+"
MINUS:      "-"
STAR:       "*"
SLASH:      "/"
PERCENT:    "%"
EQUAL:      "="
ELLIPSIS:    "..."
PLUS_EQUAL:    "+="
MINUS_EQUAL:   "-="
STAR_EQUAL:    "*="
SLASH_EQUAL:   "/="
PERCENT_EQUAL: "%="

LT:         "<"
GT:         ">"
LE:         "<="
GE:         ">="
EQ:         "=="
NEQ:        "!="

AND:        "&&"
OR:         "||"
NOT:        "!"
BIT_AND:    "&"
BIT_OR:     "|"
BIT_NOT:    "~"
SHL:        "<<"
SHR:        ">>"

INCREMENT:  "++"
DECREMENT:  "--"
ARROW:      "->"
TERNARY:    "?"
COLON:      ":"

# PUNCTUATION
###############
_LPAREN:     "("
_RPAREN:     ")"
_LBRACE:     "{"
_RBRACE:     "}"
_LBRACKET:   "["
_RBRACKET:   "]"
_SEMICOLON:  ";"
_COMMA:      ","
_DOT:        "."
_ELLIPSIS:   "~"

# MISCELLANEOUS
##################
HASH:            "#"
INCLUDE:         "include"
DEFINE:          "define"
USING_NAMESPACE: "using"

##########################################################################################################
# RULESET
%import common.WS
%ignore WS