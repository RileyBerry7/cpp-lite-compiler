// grammar.lark

#################
#  ENTRY POINT  #
?start: translation_unit

translation_unit: function_definition
function_definition: type_specifier function_declarator compound_statement

type_specifier: INT | VOID | FLOAT | BOOL | CHAR

declarator: function_declarator
          | variable_declarator

function_declarator: IDENTIFIER parameter_list
variable_declarator: IDENTIFIER [EQUAL expression]

parameter_list: _LPAREN [parameter(_COMMA parameter)*] _RPAREN
parameter: type_specifier IDENTIFIER

compound_statement: _LBRACE statement* _RBRACE

//statement: jump_statement
//jump_statement: RETURN expression _SEMICOLON

expression: literal_expression | relational_expression
literal_expression: INT_LITERAL
relational_expression: expression LT expression
                      | expression GT expression
                      | expression LE expression
                      | expression GE expression
                      | expression EQ expression
                      | expression NEQ expression


##########################################################################################################
# DECLARATIONS & TYPES

//declaration_specifiers      // types & storage qualifiers (int, static)
//type_specifiers             // (int, float, char... etc])
//init_declarator             // (x, x = 5, arr[10], *ptr)
//parameter_declaration       // parameter in fuction declaration
//declarator                  // variable or fuction declaration
//initializer                 // the "= value" or "{...}" part

##########################################################################################################
# EXPRESSIONS

//primary_expression          // identifiers, literals, grouped expression
//postfix_expression          // calls, array access, x++, x.y
//unary_expression            // -x, *p, &x, !x
//multiplicative_expression   // x * y, x / y
//additive_expression         // x + y, x - y
//relational_expression       // x < y, x >= y
//equality_expression         // x == y, x != y
//logical_and_expression      // x && y
//logical_or_expression       // 'x
//assignment_expression       // x = y + 1, x += 1
//expression                  // one or more comma-seperatied expressions
//conditional_expression      // ternary: cond ? x : y

##########################################################################################################
# STATEMENTS

//statement                   // generic statement
statement: jump_statement | selection_statement | interaction_statement | variable_declaration

//compound_statement          //  "{ stmt; stmt; }" block
//expression_statement        // expr;

//declaration                 // int x = 0;
variable_declaration: type_specifier variable_declarator _SEMICOLON

//selection_statement         // if, if-else, switch

selection_statement: if_statement

if_statement: IF _LPAREN expression _RPAREN compound_statement
            | IF _LPAREN expression _RPAREN compound_statement ELSE compound_statement
            | IF _LPAREN expression _RPAREN compound_statement ELSE if_statement compound_statement

//interation_statement        // for, while, do-while
interaction_statement: FOR _LPAREN expression _SEMICOLON expression _SEMICOLON expression _RPAREN compound_statement




//jump_statement              // return, break, continue, goto
jump_statement: return_statement
return_statement: RETURN expression _SEMICOLON

//labeled_statement           // label: stmt;

##########################################################################################################
# TERMINALS

# IDENTIFIERS & LITERALS
#############################
IDENTIFIER:     /[a-zA-Z_][a-zA-Z0-9_]*/
INT_LITERAL:    /0|[1-9][0-9]*/
STRING_LITERAL: /(\\.|[^"\\]*)"/
BOOL_LITERAL:   "TRUE" | "FALSE"
NULLPTR:        "nullptr"

# KEYWORDS (CONTROL-FLOW)
##############################
IF:         "if"
ELSE:       "else"
SWITCH:     "switch"
CASE:       "case"
DEFAULT:    "default"
FOR:        "for"
WHILE:      "while"
DO:         "do"
BREAK:      "break"
CONTINUE:   "continue"
RETURN:     "return"
GOTO:       "goto"

# KEYWORDS (TYPES)
######################
INT:        "int"
FLOAT:      "float"
DOUBLE:     "double"
CHAR:       "char"
VOID:       "void"
BOOL:       "bool"
AUTO:       "auto"
SIGNED:     "signed"
UNSIGNED:   "unsigned"
SHORT:      "short"
LONG:       "long"
CONST:      "const"
VOLATILE:   "volatile"
STATIC:     "static"
EXTERN:     "extern"
MUTABLE:    "mutable"
REGISTER:   "register"
INLINE:     "inline"
VIRTUAL:    "virtual"
EXPLICIT:   "explicit"

# KEYWORDS (CLASS, STRUCT, NAMESPACE)
#########################################
CLASS:      "class"
STRUCT:     "struct"
UNION:      "union"
ENUM:       "enum"
NAMESPACE:  "namespace"
TEMPLATE:   "template"
TYPEDEF:    "tyepdef"
USING:      "using"
FRIEND:     "friend"
PUBLIC:     "public"
PRIVATE:    "private"
PROTECTED:  "protected"

# OPERATORS
###############
PLUS:       "+"
MINUS:      "-"
STAR:       "*"
SLASH:      "/"
PERCENT:    "%"
EQUAL:      "="
PLUS_EQUAL:    "+="
MINUS_EQUAL:   "-="
STAR_EQUAL:    "*="
SLASH_EQUAL:   "/="
PERCENT_EQUAL: "%="

LT:         "<"
GT:         ">"
LE:         "<="
GE:         ">+"
EQ:         "=="
NEQ:        "!="

AND:        "&&"
OR:         "||"
NOT:        "!"
BIT_AND:    "&"
BIT_OR:     "|"
BIT_NOT:    "~"
SHL:        "<<"
SHR:        ">>"

INCREMENT:  "++"
DECREMENT:  "--"
ARROW:      "->"
TERNARY:    "?"
COLON:      ":"

# PUCTUATION
###############
_LPAREN:     "("
_RPAREN:     ")"
_LBRACE:     "{"
_RBRACE:     "}"
_LBRACKET:   "["
_RBRACKET:   "]"
_SEMICOLON:  ";"
_COMMA:      ","
_DOT:        "."
_ELLIPSIS:   "~"

# MISCELLANEOUS
##################
HASH:            "#"
INCLUDE:         "include"
DEFINE:          "define"
USING_NAMESPACE: "using"

##########################################################################################################
# RULESET
%ignore WS
%import common.WS